= RUBY ROLLER

<pre style="color:red">
                  ____
              ,dP9CGG88@b,
            ,IP""YICCG888@@b,
           dIi   ,IICGG8888@b
          dCIIiciIICCGG8888@@b
  ________GCCIIIICCCGGG8888@@@________________
          GGCCCCCCCGGG88888@@@
          GGGGCCCGGGG88888@@@@...
          Y8GGGGGG8888888@@@@P.....
           Y88888888888@@@@@P......
           `Y8888888@@@@@@@P'......
              `@@@@@@@@@P'.......
                  """"........
</pre>

* home: http://rubyworks.github.com/rolls
* work: http://github.com/rubyworks/rolls


== DESCRIPTION

Roller is a library manager for Ruby. With Roller developers can run their
programs in real time --no install phase is required for one program
to depend on another. This makes it very easy to work on a set of
interdependent projects, without vendoring. It also makes easy to
create isolated library environments. Yet Roller does so efficiently
because there need only be a single copy of any given version of a library
on disc. And libraries can be stored anywhere. There is no special place
they must all reside. You simply tell Roller where they reside. And that
includes your Gem home. Roller can serve gem installed libraries as easily
as it serves development libraries.


== STATUS

Roller works fairly well. I have used it for development for years, so
on the whole it stays in working order. However it is still under
development, so configuration is still subject to a fair bit of change.
The loading heuristics are quite advanced, which accounts for the speed,
but as a trade-off the loading procedure is more complex.


== HOW TO USE

=== Setting Up

To use roll regularly you first need to add it your RUBYOPT environment
variable.

  $ export RUBYOPT="-roll"

If you want to use RubyGems as a fallback, this can be done too:

  $ export RUBYOPT="-roll -rubygems"

The alternative to this is to add your gem locations to your roll
environment (see below).

To support executables you will also need to add a line to your startup
.bashrc (or equivalent) file.

  export PATH="$PATH:$(roll path)"

This will add the +bin+ locations of the programs encompassed by your
current roll environment.

(NOTE: The way bin paths are handled might change to a symlink directory
in the future if limitations of long environment variables prove problematic.
So far I have not had any issues with the PATH approach.)

=== Preparing your Projects

For a project to be detected by Roller it must conform to a
minimal POM[http://proutils.github.com/pom] setup. Specifically,
the project must have <code>.meta/</code> file with `type: ruby`.
That is the bare minimum for a project to be loadable via Roller.
The only exception is for installed gems. If you point Roller torwards
a gem home, Roller will gather the necessary metadata from the gem's
.gemspec file instead.

See Meta[http://wiki.github.com/rubyworks/meta] for more information about
the <code>.meta/</code> file.

=== Library Management

Next you need to setup an roll *environment*. The default environment
is called +production+. You can add a library search location to it
using +roll in+. Eg.

  $ roll in /opt/ruby/

As a developer you will may want to setup a +development+ environment.
To change or add an environment use the +use+ command.

  $ roll use development

Then you can add the paths you want. For instance my development
environment is essentially constructed like this:

  $ roll in ~/programs/proutils
  $ roll in ~/programs/rubyworks
  $ roll in ~/programs/trans

By default these paths will be searched for POM conforming projects
up to a depth of three sub-directories. That's suitable for
most needs. You can specify the the depth explicitly with the 
<tt>--depth</tt> or <tt>-d</tt> option. You can roll in the 
current working directory by leaving off the path argument. 
If the current directory has a +.ruby+ directory, a depth of +1+
will automatically be used.

In the same way you can add gem locations to you roll environment.
For instance on my system:

  $ sudo roll in /usr/lib/ruby/gems/1.8/gems

Note the use of +sudo+ here. Roller will create <code>.ruby/</coide>
entries automatically in each gem if not already present. Since these
are system-wide gems +sudo+ is needed to give rolls write access.
This is only necessary the first time any new gem is rolled in.

If a rolled in location changes --say you start a new project, or
install a new gem, you can resync you roll index via the +sync+ command.

  $ roll sync

Resyncing is only needed when a new project is added to an enironments
lookup locations, or if one of the already included projects change
the `name` or `load_path` in the `.meta` file. To clarify, take a look at the
+show+ command.

  $ roll show --index

The +use+ command stores the current environment name until the
end of the bash session. To set it perminently, adjust the RUBYENV
environment variable or write the fallback default in the 
<code>$HOME/.config/roll/default</code> file.

For see the rest of the +roll+ commands, use <code>roll help</code>.

Now you are *read to roll*! 

=== Autoload Caveat

Ruby has a "bug" in that #autoload will not use a customized #require
method. Roller will still work with autoload, if the a library has
already been activated.


== LEARNING MORE

The above provides a brief overview of using roll. But there is more to
it. To get a deeper understanding of the system and how to use +roll+ to
it fullest extent, please visit http://proutils.github.org/roll/.


== HOW TO INSTALL

=== Manual Installation (Recommended)

First you need a copy of the roll tarball (or zip) archive.
You will find them here[http://github.com/proutils/roll/download].
You will of course need to unpack the file. For example,

  $ tar -xvzf roll-1.0.0

If you already have Ruby Setup installed on your system you can
use it to install Roller (See: http://setup.rubyforge.org). 

  $ cd roll-1.0.0
  $ sudo setup.rb

Otherwise, Roller includes a copy of Ruby Setup that you can
use.

  $ cd roll-1.0.0
  $ sudo script/setup.

On Windows, this last line will need to be 'ruby script/setup'.

=== RubyGems Installation

We strongly recommend installing Roller manually b/c Roller is a
peer to RubyGems. However, the last we tested it, Roller could
be install via Gems as a means of trying it out --though you won't
get the full benefits of the system.

  gem install roll

If you like Roller, then later you can uninstall the gem and
do a proper manual install.


== BY THE WAY

Roller was RubyForge project #1004. She's been around a while! ;)


== LICENSE & COPYRIGHT

Roller Copyright (c) 2006,2009 Thomas Sawyer

Roller is distributed under the same terms as Ruby.

See the LICENSE file details.

